// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum UserRole {
  USER
  ADMIN
}

// models
model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  name      String?
  role      UserRole  @default(USER)
  posts     Post[]
  comments  Comment[]
  profile   Profile?
}

model Profile {
  id     String    @id @default(uuid()) @db.Uuid
  bio    String
  user   User      @relation(fields: [userId], references: [id])
  userId String    @db.Uuid @unique
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  title     String
  content   String?
  published Boolean?  @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?   @db.Uuid
  comments  Comment[]
  tags      PostTag[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  likes     Int?     
  dislikes  Int?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id]) 
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  posts     PostTag[]
}

model PostTag {
  post    Post     @relation(fields: [postId], references: [id])
  postId  String   @db.Uuid
  tag     Tag      @relation(fields: [tagId], references: [id])
  tagId   String   @db.Uuid

  @@id([postId, tagId])
}